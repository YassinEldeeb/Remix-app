{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/@remix-run/dev/compiler/shims/react.ts", "../app/entry.server.tsx", "/Users/mahmoud/Desktop/remix-with-workos/app/root.tsx", "../app/components/layout/navbar.tsx", "../app/utils/index.ts", "../app/utils/session.server.ts", "../app/models/user.server.ts", "../app/utils/db.server.ts", "/Users/mahmoud/Desktop/remix-with-workos/app/routes/settings.two-factor-authentication.tsx", "../app/utils/workos.server.ts", "../app/components/settings/mfa/setup/activated.tsx", "../app/components/settings/mfa/setup/select-factor.tsx", "../app/components/shared/button.tsx", "../app/components/shared/spinner.tsx", "../app/components/shared/text-input.tsx", "../app/components/settings/mfa/setup/verify.tsx", "../app/components/mfa/form-switcher.tsx", "../app/components/mfa/verification-input.tsx", "../app/components/mfa/sms-form.tsx", "../app/components/mfa/totp-form.tsx", "/Users/mahmoud/Desktop/remix-with-workos/app/routes/forgot-password.tsx", "/Users/mahmoud/Desktop/remix-with-workos/app/routes/settings.tsx", "../app/components/settings/change-password.tsx", "../app/components/settings/delete-account.tsx", "../app/components/settings/mfa/factors.tsx", "/Users/mahmoud/Desktop/remix-with-workos/app/routes/logout.tsx", "/Users/mahmoud/Desktop/remix-with-workos/app/routes/signup.tsx", "/Users/mahmoud/Desktop/remix-with-workos/app/routes/index.tsx", "/Users/mahmoud/Desktop/remix-with-workos/app/routes/login.tsx", "../app/components/login-form.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "import type { EntryContext } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { renderToString } from \"react-dom/server\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  let markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "import type {\n  LinksFunction,\n  LoaderFunction,\n  MetaFunction,\n} from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useLoaderData,\n} from '@remix-run/react';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { Navbar } from './components/layout/navbar';\nimport styles from './styles/app.css';\nimport {\n  getSession,\n  getUser,\n  cookieSessionStorage,\n} from './utils/session.server';\nimport type { ToastMessage } from './utils/session.server';\nimport { useEffect } from 'react';\n\nexport const links: LinksFunction = () => {\n  return [{ rel: 'stylesheet', href: styles }];\n};\n\nexport const meta: MetaFunction = () => ({\n  charset: 'utf-8',\n  title: 'WorkOS + Remix',\n  viewport: 'width=device-width,initial-scale=1',\n});\n\ntype LoaderData = {\n  user: Awaited<ReturnType<typeof getUser>>;\n  toastMessage?: ToastMessage | null;\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const { session } = await getSession(request);\n  const user = await getUser(request);\n  const toastMessage = session.get('toastMessage') as ToastMessage;\n\n  if (!toastMessage) {\n    return json<LoaderData>({ toastMessage, user });\n  }\n\n  if (!toastMessage.type) {\n    throw new Error('Message should have a type');\n  }\n\n  return json<LoaderData>(\n    {\n      user,\n      toastMessage: toastMessage ? toastMessage : null,\n    },\n    {\n      headers: {\n        'Set-Cookie': await cookieSessionStorage.commitSession(session),\n      },\n    }\n  );\n};\n\nexport default function App() {\n  const { toastMessage } = useLoaderData<LoaderData>();\n\n  useEffect(() => {\n    if (!toastMessage) {\n      return;\n    }\n    const { message, type } = toastMessage;\n\n    switch (type) {\n      case 'success':\n        toast.success(message, {\n          duration: 4000,\n        });\n        break;\n      case 'error':\n        toast.error(message, { duration: 4000 });\n        break;\n    }\n  }, [toastMessage]);\n\n  return (\n    <html lang=\"en\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <div>\n          <Navbar />\n          <main className=\"p-6 max-w-2xl mx-auto\">\n            <Outlet />\n            <Toaster />\n          </main>\n        </div>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n", "import { Fragment } from 'react';\nimport { Disclosure, Menu, Transition } from '@headlessui/react';\nimport { Form, Link } from '@remix-run/react';\nimport { useOptionalUser } from '~/utils';\nimport {\n  Cross2Icon,\n  HamburgerMenuIcon,\n  PersonIcon,\n} from '@radix-ui/react-icons';\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(' ');\n}\n\nexport function Navbar() {\n  const user = useOptionalUser();\n  return (\n    <Disclosure as=\"nav\" className=\"bg-white shadow\">\n      {({ open }) => (\n        <>\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex justify-between h-16\">\n              <div className=\"flex\">\n                <div className=\"-ml-2 mr-2 flex items-center md:hidden\">\n                  {/* Mobile menu button */}\n                  {user && (\n                    <Disclosure.Button className=\"inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500\">\n                      <span className=\"sr-only\">Open main menu</span>\n                      {open ? (\n                        <Cross2Icon\n                          className=\"block h-6 w-6\"\n                          aria-hidden=\"true\"\n                        />\n                      ) : (\n                        <HamburgerMenuIcon\n                          className=\"block h-6 w-6\"\n                          aria-hidden=\"true\"\n                        />\n                      )}\n                    </Disclosure.Button>\n                  )}\n                </div>\n                <div className=\"flex-shrink-0  text-lg flex items-center\">\n                  <Link to=\"/\">WorkOS + Remix</Link>\n                </div>\n              </div>\n              {user && (\n                <div className=\"flex items-center\">\n                  <div className=\"hidden md:ml-4 md:flex-shrink-0 md:flex md:items-center\">\n                    {/* Profile dropdown */}\n                    <Menu as=\"div\" className=\"ml-3 relative\">\n                      <div>\n                        <Menu.Button className=\"bg-white rounded-full flex text-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\">\n                          <span className=\"sr-only\">Open user menu</span>\n                          <PersonIcon className=\"h-7 w-7 text-white bg-indigo-500 p-1.5 rounded-full\" />\n                        </Menu.Button>\n                      </div>\n                      <Transition\n                        as={Fragment}\n                        enter=\"transition ease-out duration-200\"\n                        enterFrom=\"transform opacity-0 scale-95\"\n                        enterTo=\"transform opacity-100 scale-100\"\n                        leave=\"transition ease-in duration-75\"\n                        leaveFrom=\"transform opacity-100 scale-100\"\n                        leaveTo=\"transform opacity-0 scale-95\"\n                      >\n                        <Menu.Items className=\"origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none\">\n                          <Menu.Item>\n                            <p className=\"block px-4 py-2 mb-3 text-xs text-gray-700 border-b-2 border-gray-200\">\n                              {user?.email}\n                            </p>\n                          </Menu.Item>\n                          <Menu.Item>\n                            {({ active }) => (\n                              <Link\n                                to=\"/settings\"\n                                className={classNames(\n                                  active ? 'bg-gray-100' : '',\n                                  'hover:bg-gray-100 block px-4 py-2 text-sm text-gray-700'\n                                )}\n                              >\n                                Settings\n                              </Link>\n                            )}\n                          </Menu.Item>\n                          <Menu.Item>\n                            {({ active }) => (\n                              <Form action=\"/logout\" method=\"post\">\n                                <button\n                                  type=\"submit\"\n                                  className=\"hover:bg-gray-100 w-full text-left block px-4 py-2 text-sm text-gray-700\"\n                                >\n                                  Logout\n                                </button>\n                              </Form>\n                            )}\n                          </Menu.Item>\n                        </Menu.Items>\n                      </Transition>\n                    </Menu>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n          {user && (\n            <Disclosure.Panel className=\"md:hidden\">\n              <div className=\"pt-4 pb-3 border-t border-gray-200\">\n                <div className=\"flex items-center px-4 sm:px-6\">\n                  <div className=\"flex-shrink-0\">\n                    <PersonIcon className=\"h-7 w-7 text-white  bg-indigo-500 p-1.5 rounded-full\" />\n                  </div>\n                  <div className=\"ml-3\">\n                    <div className=\"text-sm  text-gray-500\">{user?.email}</div>\n                  </div>\n                </div>\n                <div className=\"mt-3 space-y-1\">\n                  <Disclosure.Button\n                    as=\"a\"\n                    href=\"/settings\"\n                    className=\"block px-4 py-2 text-base  text-gray-500 hover:text-gray-800 hover:bg-gray-100 sm:px-6\"\n                  >\n                    Settings\n                  </Disclosure.Button>\n                  <Disclosure.Button\n                    as=\"a\"\n                    href=\"/logout\"\n                    className=\"block px-4 py-2 text-base  text-gray-500 hover:text-gray-800 hover:bg-gray-100 sm:px-6\"\n                  >\n                    Log out\n                  </Disclosure.Button>\n                </div>\n              </div>\n            </Disclosure.Panel>\n          )}\n        </>\n      )}\n    </Disclosure>\n  );\n}\n", "import { useMatches } from \"@remix-run/react\";\nimport { useMemo } from \"react\";\n\nimport type { User } from \"~/models/user.server\";\n\nconst DEFAULT_REDIRECT = \"/\";\n\n/**\n * This should be used any time the redirect path is user-provided\n * (Like the query string on our login/signup pages). This avoids\n * open-redirect vulnerabilities.\n * @param {string} to The redirect destination\n * @param {string} defaultRedirect The redirect to use if the to is unsafe.\n */\nexport function safeRedirect(\n  to: FormDataEntryValue | string | null | undefined,\n  defaultRedirect: string = DEFAULT_REDIRECT\n) {\n  if (!to || typeof to !== \"string\") {\n    return defaultRedirect;\n  }\n\n  if (!to.startsWith(\"/\") || to.startsWith(\"//\")) {\n    return defaultRedirect;\n  }\n\n  return to;\n}\n\n/**\n * This base hook is used in other hooks to quickly search for specific data\n * across all loader data using useMatches.\n * @param {string} id The route id\n * @returns {JSON|undefined} The router data or undefined if not found\n */\nexport function useMatchesData(\n  id: string\n): Record<string, unknown> | undefined {\n  const matchingRoutes = useMatches();\n  const route = useMemo(\n    () => matchingRoutes.find((route) => route.id === id),\n    [matchingRoutes, id]\n  );\n  return route?.data;\n}\n\nfunction isUser(user: any): user is User {\n  return user && typeof user === \"object\" && typeof user.email === \"string\";\n}\n\nexport function useOptionalUser(): User | undefined {\n  const data = useMatchesData(\"root\");\n  if (!data || !isUser(data.user)) {\n    return undefined;\n  }\n  return data.user;\n}\n\nexport function useUser(): User {\n  const maybeUser = useOptionalUser();\n  if (!maybeUser) {\n    throw new Error(\n      \"No user found in root loader, but user is required by useUser. If user is optional, try useOptionalUser instead.\"\n    );\n  }\n  return maybeUser;\n}\n\nexport function validateEmail(email: unknown): email is string {\n  return typeof email === \"string\" && email.length > 3 && email.includes(\"@\");\n}\n", "import { createCookieSessionStorage, redirect } from '@remix-run/node';\nimport type { Session } from '@remix-run/node';\nimport invariant from 'tiny-invariant';\nimport type { User } from '~/models/user.server';\nimport { getUserById } from '~/models/user.server';\n\ninvariant(process.env.SESSION_SECRET, 'SESSION_SECRET must be set');\n\nexport const cookieSessionStorage = createCookieSessionStorage({\n  cookie: {\n    name: '__session',\n    httpOnly: true,\n    path: '/',\n    sameSite: 'lax',\n    secrets: [process.env.SESSION_SECRET],\n    secure: process.env.NODE_ENV === 'production',\n  },\n});\n\nconst USER_SESSION_KEY = 'userId';\n\nexport async function getSession(request: Request) {\n  const cookie = request.headers.get('Cookie');\n\n  const session = await cookieSessionStorage.getSession(cookie);\n  return {\n    session,\n  };\n}\n\nexport async function getUserId(request: Request): Promise<string | undefined> {\n  const { session } = await getSession(request);\n  const userId = session.get(USER_SESSION_KEY);\n  return userId;\n}\n\nexport async function getUser(request: Request): Promise<null | User> {\n  const userId = await getUserId(request);\n  if (userId === undefined) return null;\n\n  const user = await getUserById(userId);\n\n  if (user) return user;\n\n  throw await logout(request);\n}\n\nexport async function requireUserId(\n  request: Request,\n  redirectTo: string = new URL(request.url).pathname\n): Promise<string> {\n  const userId = await getUserId(request);\n  if (!userId) {\n    const searchParams = new URLSearchParams([['redirectTo', redirectTo]]);\n    throw redirect(`/login?${searchParams}`);\n  }\n  return userId;\n}\n\nexport async function requireUser(request: Request) {\n  const userId = await requireUserId(request);\n\n  const user = await getUserById(userId);\n  if (user) return user;\n\n  throw await logout(request);\n}\n\nexport async function createUserSession({\n  request,\n  userId,\n  remember,\n  redirectTo,\n}: {\n  request: Request;\n  userId: string;\n  remember: boolean;\n  redirectTo: string;\n}) {\n  const { session } = await getSession(request);\n  session.set(USER_SESSION_KEY, userId);\n\n  return redirect(redirectTo, {\n    headers: {\n      'Set-Cookie': await cookieSessionStorage.commitSession(session, {\n        maxAge: remember\n          ? 60 * 60 * 24 * 7 // 7 days\n          : undefined,\n      }),\n    },\n  });\n}\n\nexport async function logout(request: Request) {\n  const { session } = await getSession(request);\n  return redirect('/', {\n    headers: {\n      'Set-Cookie': await cookieSessionStorage.destroySession(session),\n    },\n  });\n}\n\nexport type ToastMessage = { message: string; type: 'success' | 'error' };\n\nexport function displayToast(\n  session: Session,\n  message: string,\n  type = 'success'\n) {\n  return session.flash('toastMessage', {\n    message,\n    type,\n  } as ToastMessage);\n}\n", "import type { Password, User } from '@prisma/client';\nimport bcrypt from 'bcryptjs';\nimport { prisma } from '~/utils/db.server';\nexport type { User } from '@prisma/client';\n\nexport async function getUserById(userId: User['id']) {\n  return prisma.user.findUnique({ where: { id: userId } });\n}\n\nexport async function getUserByEmail(email: User['email']) {\n  return await prisma.user.findUnique({ where: { email } });\n}\n\nexport async function getUserAuthFactors(userId: User['id']) {\n  return await prisma.user.findUnique({\n    where: { id: userId },\n    select: {\n      smsFactorId: true,\n      totpFactorId: true,\n    },\n  });\n}\n\nexport async function deleteUser(userId: User['id']) {\n  return await prisma.user.delete({\n    where: { id: userId },\n  });\n}\n\nexport async function enrollTotp(\n  userId: User['id'],\n  totpFactorId: User['totpFactorId']\n) {\n  return await prisma.user.update({\n    where: {\n      id: userId,\n    },\n    data: {\n      totpFactorId,\n    },\n  });\n}\n\nexport async function enrollSMS(\n  userId: User['id'],\n  smsFactorId: User['smsFactorId']\n) {\n  return await prisma.user.update({\n    where: {\n      id: userId,\n    },\n    data: {\n      smsFactorId,\n    },\n  });\n}\n\nexport async function disable2FA(userId: User['id']) {\n  return await prisma.user.update({\n    where: {\n      id: userId,\n    },\n    data: {\n      smsFactorId: null,\n      totpFactorId: null,\n    },\n  });\n}\n\nexport async function updatePassword(\n  userId: User['id'],\n  currentPassword: string,\n  newPassword: string\n) {\n  const userWithPassword = await prisma.user.findUnique({\n    where: {\n      id: userId,\n    },\n    include: {\n      password: true,\n    },\n  });\n\n  if (!userWithPassword || !userWithPassword.password) {\n    return null;\n  }\n\n  const isValid = await bcrypt.compare(\n    currentPassword,\n    userWithPassword.password.hash\n  );\n\n  if (!isValid) {\n    return null;\n  }\n\n  const hashedPassword = await bcrypt.hash(newPassword, 10);\n\n  return await prisma.user.update({\n    where: {\n      id: userId,\n    },\n    data: {\n      password: {\n        update: {\n          hash: hashedPassword,\n        },\n      },\n    },\n  });\n}\n\nexport async function createUser(email: User['email'], password: string) {\n  const hashedPassword = await bcrypt.hash(password, 10);\n\n  return await prisma.user.create({\n    data: {\n      email,\n      password: {\n        create: {\n          hash: hashedPassword,\n        },\n      },\n    },\n  });\n}\n\nexport async function verifyLogin(\n  email: User['email'],\n  password: Password['hash']\n) {\n  const userWithPassword = await prisma.user.findUnique({\n    where: { email },\n    include: {\n      password: true,\n    },\n  });\n\n  if (!userWithPassword || !userWithPassword.password) {\n    return null;\n  }\n\n  const isValid = await bcrypt.compare(\n    password,\n    userWithPassword.password.hash\n  );\n\n  if (!isValid) {\n    return null;\n  }\n\n  const { password: _password, ...userWithoutPassword } = userWithPassword;\n\n  return userWithoutPassword;\n}\n", "import { PrismaClient } from \"@prisma/client\";\n\nlet prisma: PrismaClient;\n\ndeclare global {\n  var __db__: PrismaClient;\n}\n\n// this is needed because in development we don't want to restart\n// the server with every change, but we want to make sure we don't\n// create a new connection to the DB with every change either.\n// in production we'll have a single connection to the DB.\nif (process.env.NODE_ENV === \"production\") {\n  prisma = new PrismaClient();\n} else {\n  if (!global.__db__) {\n    global.__db__ = new PrismaClient();\n  }\n  prisma = global.__db__;\n  prisma.$connect();\n}\n\nexport { prisma };\n", "import { json, redirect } from '@remix-run/node';\nimport type { ActionFunction, LoaderFunction } from '@remix-run/node';\nimport { enrollSMS, enrollTotp } from '~/models/user.server';\nimport {\n  cookieSessionStorage,\n  displayToast,\n  getSession,\n  requireUser,\n  requireUserId,\n} from '~/utils/session.server';\nimport { workos } from '~/utils/workos.server';\nimport {\n  SelectFactor,\n  Verify,\n  Activated,\n} from '~/components/settings/mfa/setup';\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  return await requireUserId(request);\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  const user = await requireUser(request);\n  const { session } = await getSession(request);\n  let formData = await request.formData();\n  let { _action, ...values } = Object.fromEntries(formData);\n\n  switch (_action) {\n    case 'selectFactor':\n      if (!values.authFactorType) {\n        return json(\n          { errors: { message: 'This field is required' } },\n          { status: 400 }\n        );\n      }\n      if (values.authFactorType === 'totp') {\n        try {\n          const totpFactor = await workos.mfa.enrollFactor({\n            type: 'totp',\n            issuer: user.email,\n            user: user.email,\n          });\n\n          const totpChallenge = await workos.mfa.challengeFactor({\n            authenticationFactorId: totpFactor.id,\n          });\n\n          return { totpFactor, totpChallenge, step: 1 };\n        } catch (error) {\n          return json({ errors: { message: error } }, { status: 400 });\n        }\n      }\n\n      if (values.authFactorType === 'sms') {\n        setTimeout(() => {}, 3000);\n        return { smsFactor: true, step: 1 };\n      }\n\n    case 'phoneNumber':\n      if (!values.phoneNumber) {\n        return json(\n          { errors: { message: 'You need to provide a phone number' } },\n          { status: 400 }\n        );\n      }\n\n      try {\n        const smsFactor = await workos.mfa.enrollFactor({\n          type: 'sms',\n          phoneNumber: `${values.phoneNumber}`,\n        });\n\n        const smsChallenge = await workos.mfa.challengeFactor({\n          authenticationFactorId: smsFactor.id,\n        });\n\n        return { smsFactor, smsChallenge, step: 1 };\n      } catch (error) {\n        displayToast(\n          session,\n          `Something went wrong, please try again`,\n          'success'\n        );\n        return null;\n      }\n\n    case 'verify':\n      const {\n        authenticationCode,\n        authenticationChallengeId,\n        isSMSVerification,\n      } = values;\n\n      if (authenticationCode.toString().length !== 6) {\n        return json(\n          { errors: { title: 'Code must be 6 digits' } },\n          { status: 400 }\n        );\n      }\n\n      try {\n        const response = await workos.mfa.verifyFactor({\n          authenticationChallengeId: `${authenticationChallengeId}`,\n          code: `${authenticationCode}`,\n        });\n\n        if (response.valid) {\n          if (isSMSVerification === 'true') {\n            await enrollSMS(\n              user.id,\n              response.challenge.authentication_factor_id\n            );\n          } else {\n            await enrollTotp(\n              user.id,\n              response.challenge.authentication_factor_id\n            );\n          }\n        }\n        return { response, step: 2 };\n      } catch (error) {\n        return json({ errors: { message: error } }, { status: 400 });\n      }\n  }\n  return null;\n};\n\nconst MultiFactorAuthentication = () => {\n  return (\n    <section className=\"my-10\">\n      <h1 className=\"text-2xl font\">Set up two-factor authentication (2FA)</h1>\n      <ol className=\"my-8 relative border-l-2 border-gray-200\">\n        <SelectFactor />\n        <Verify />\n        <Activated />\n      </ol>\n    </section>\n  );\n};\n\nexport default MultiFactorAuthentication;\n", "import WorkOS from '@workos-inc/node';\n\nexport const workos = new WorkOS(process.env.WORKOS_API_KEY);\n", "import { CheckIcon } from '@radix-ui/react-icons';\nimport { useActionData } from '@remix-run/react';\n\nexport const Activated = () => {\n  const actionData = useActionData();\n\n  return (\n    <div className=\"flex\">\n      {actionData?.step === 2 && (\n        <div className=\"border-l-2 border-white  h-28 absolute -left-0.5 -bottom-3 z-10\"></div>\n      )}\n      <li\n        className={`ml-6 ${\n          actionData?.step === 2\n            ? 'p-5 border-2 border-green-100 rounded-md bg-green-50'\n            : ''\n        }`}\n      >\n        {actionData?.step === 2 ? (\n          <>\n            <div className=\"flex items-center\">\n              <span className=\"flex absolute bg-indigo-500 -left-4 justify-center items-center w-7 h-7 rounded-full\">\n                <CheckIcon className=\"w-4 h-4 text-white\" />\n              </span>\n              <h2 className=\"text-lg \">Two-factor authentication activated</h2>\n            </div>\n            <p className=\"mb-5 mt-3 text-base\">\n              You have successfully added a second authentication factor for\n              your account. You'll be prompted to use it the next time you log\n              in\n            </p>\n          </>\n        ) : (\n          <div className=\"flex\">\n            <div className=\"border-l-2 border-white h-6 absolute -left-0.5 -bottom-3\"></div>\n            <div className=\"text-lg  flex items-center mb-3\">\n              <span className=\"flex absolute bg-indigo-500 -left-4 justify-center items-center w-7 h-7 rounded-full text-white  \">\n                3\n              </span>\n              <h2>Two-factor authentication activated</h2>\n            </div>\n          </div>\n        )}\n      </li>\n    </div>\n  );\n};\n", "import * as RadioGroup from '@radix-ui/react-radio-group';\nimport { Form, useActionData, useTransition } from '@remix-run/react';\nimport { ChatBubbleIcon, CheckIcon, MobileIcon } from '@radix-ui/react-icons';\nimport { Button } from '~/components/shared';\n\nexport const SelectFactor = () => {\n  const actionData = useActionData();\n  const transition = useTransition();\n\n  return (\n    <div>\n      <li\n        className={` ml-6 ${\n          !actionData?.step ? 'p-5 border-2 border-gray-200 rounded-md' : ''\n        }`}\n      >\n        {actionData?.step >= 1 ? (\n          <div className=\"text-lg  flex items-center\">\n            <span className=\"flex absolute bg-indigo-500 -left-4 justify-center items-center w-7 h-7 rounded-full\">\n              <CheckIcon className=\"w-4 h-4 text-white\" />\n            </span>\n            <h2>Choose an authentication factor</h2>\n          </div>\n        ) : (\n          <>\n            <div className=\"text-lg  flex items-center\">\n              <span className=\"flex absolute top-0 -left-4 justify-center items-center w-5 p-3.5 h-5 bg-indigo-500  rounded-full ring-8 ring-white text-base  text-white\">\n                1\n              </span>\n              <h2>Choose an authentication factor</h2>\n            </div>\n            <p className=\"mb-5 mt-3\">\n              Two-factor authentication (2FA) is an extra layer of security used\n              when logging into websites or apps.\n            </p>\n            <Form method=\"post\" className=\"mt-3 space-y-3 mb-4\">\n              <RadioGroup.Root\n                name=\"authFactorType\"\n                defaultValue=\"totp\"\n                aria-label=\"Select authentication factor type\"\n              >\n                <div className=\"flex space-x-3 items-start mb-5\">\n                  <div>\n                    <RadioGroup.Item\n                      className=\"block h-4 w-4 mt-2.5 bg-gray-200 rounded-full shadow-sm focus:outline-none focus:ring-0 focus:ring-offset-0 focus-visible:ring focus-visible:ring-indigo-500 focus-visible:ring-opacity-75 focus-visible:ring-offset-2 checked:bg-red-500\"\n                      value=\"totp\"\n                      id=\"totp\"\n                    >\n                      <RadioGroup.Indicator className=\"relative flex items-center justify-center\">\n                        <div className=\"bg-indigo-600 w-2 h-2 rounded-full\"></div>\n                      </RadioGroup.Indicator>\n                    </RadioGroup.Item>\n                  </div>\n                  <label htmlFor=\"totp\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <div className=\"bg-indigo-500 rounded-full p-2\">\n                        <MobileIcon className=\"w-5 h-5 text-white\" />\n                      </div>\n                      <p className=\"text-lg\">Set up using an app</p>\n                    </div>\n                    <p>\n                      Use an application on your phone to get an authentication\n                      code when prompted. We recommend using cloud-based TOTP\n                      apps such as:{' '}\n                      <a\n                        className=\"text-indigo-600 hover:underline\"\n                        href=\"https://1passwword.com\"\n                      >\n                        1Password\n                      </a>{' '}\n                      ,{' '}\n                      <a\n                        className=\"text-indigo-600 hover:underline\"\n                        href=\"https://authy.com/\"\n                      >\n                        Authy\n                      </a>\n                      ,{' '}\n                      <a\n                        className=\"text-indigo-600 hover:underline\"\n                        href=\"https://www.lastpass.com/\"\n                      >\n                        LastPass\n                      </a>\n                      , or{' '}\n                      <a\n                        className=\"text-indigo-600 hover:underline\"\n                        href=\"https://www.microsoft.com/en-us/security/mobile-authenticator-app\"\n                      >\n                        Microsoft Authenticator.\n                      </a>\n                    </p>\n                  </label>\n                </div>\n                <div className=\"flex space-x-3 items-start\">\n                  <RadioGroup.Item\n                    className=\"h-4 w-4 mt-2.5 bg-gray-200 rounded-full shadow-sm focus:outline-none focus:ring-0 focus:ring-offset-0 focus-visible:ring focus-visible:ring-indigo-500 focus-visible:ring-opacity-75 focus-visible:ring-offset-2 checked:bg-red-500\"\n                    value=\"sms\"\n                    id=\"sms\"\n                  >\n                    <RadioGroup.Indicator className=\"relative flex items-center justify-center \">\n                      <div className=\"bg-indigo-600 w-2 h-2 rounded-full\"></div>\n                    </RadioGroup.Indicator>\n                  </RadioGroup.Item>\n                  <label htmlFor=\"sms\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <div className=\"bg-indigo-500 rounded-full p-2\">\n                        <ChatBubbleIcon className=\"w-5 h-5 text-white\" />\n                      </div>\n                      <p className=\"text-lg\">Set up using SMS</p>\n                    </div>\n                    <p>\n                      We will send you an SMS with an authentication code when\n                      prompted.\n                    </p>\n                  </label>\n                </div>\n              </RadioGroup.Root>\n              <p className=\"text-red-500\">{actionData?.errors?.message}</p>\n              <Button\n                isLoading={\n                  transition.state === 'submitting' &&\n                  transition.submission.formData.get('_action') ===\n                    'selectFactor'\n                }\n                name=\"_action\"\n                value=\"selectFactor\"\n                type=\"submit\"\n              >\n                Continue\n              </Button>\n            </Form>\n          </>\n        )}\n      </li>\n    </div>\n  );\n};\n", "import type { ButtonHTMLAttributes } from 'react';\nimport classnames from 'classnames';\nimport { Spinner } from './spinner';\n\nexport interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n  isLoading?: boolean;\n  size?: ButtonSize;\n  appearance?: ButtonAppearance;\n}\n\nexport type ButtonSize = 'small' | 'medium' | 'large';\nexport type ButtonAppearance = 'primary' | 'secondary' | 'danger' | 'muted';\n\nexport const Button = ({\n  children,\n  isLoading,\n  size = 'medium',\n  appearance = 'primary',\n  className,\n  ...props\n}: ButtonProps) => {\n  const computeStyles = (appearance: ButtonAppearance) => {\n    switch (appearance) {\n      case 'primary':\n        return 'text-white bg-indigo-600 hover:bg-indigo-700';\n      case 'secondary':\n        return 'text-indigo-700 bg-indigo-100 hover:bg-indigo-200';\n      case 'danger':\n        return 'text-white bg-red-600 hover:bg-red-700 focus:ring-red-500';\n      case 'muted':\n        return 'text-indigo-700 bg-white border-gray-200 hover:bg-gray-50';\n    }\n  };\n\n  return (\n    <button\n      {...props}\n      className={classnames(\n        computeStyles(appearance),\n        size === 'small' && 'px-3 py-2 text-sm',\n        size === 'medium' && 'px-4 py-2 text-sm ',\n        size === 'large' && 'px-4 py-2 text-base',\n        className,\n        'inline-flex items-center border border-transparent shadow-sm leading-4 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500'\n      )}\n    >\n      {children}\n      {isLoading && <Spinner />}\n    </button>\n  );\n};\n", "interface LoaderProps {\n  width?: number;\n  height?: number;\n}\nexport const Spinner = ({ width = 4, height = 4 }: LoaderProps) => {\n  return (\n    <svg\n      role=\"status\"\n      className={`ml-2 w-${width} h-${height} text-gray-200 animate-spin fill-indigo-600`}\n      viewBox=\"0 0 100 101\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\"\n        fill=\"currentFill\"\n      />\n    </svg>\n  );\n};\n", "import type { InputHTMLAttributes } from 'react';\nimport classnames from 'classnames';\n\ninterface TextInputProps extends InputHTMLAttributes<HTMLInputElement> {\n  type?: 'text' | 'email' | 'password' | 'hidden' | 'number';\n  className?: string;\n  id: string;\n  name: string;\n  placeholder?: string;\n  value?: string;\n  autoComplete?: string;\n}\n\nexport const TextInput = ({\n  type = 'text',\n  id,\n  name,\n  className,\n  placeholder,\n  value,\n  autoComplete = 'on',\n  ...props\n}: TextInputProps) => {\n  // TODO: form validation\n  return (\n    <input\n      autoComplete={autoComplete}\n      className={classnames(\n        className,\n        'shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md'\n      )}\n      placeholder={placeholder}\n      id={id}\n      name={name}\n      type={type}\n      value={value}\n      {...props}\n    />\n  );\n};\n", "import { CheckIcon } from '@radix-ui/react-icons';\nimport { Form, useActionData, useTransition } from '@remix-run/react';\nimport * as DialogPrimitive from '@radix-ui/react-dialog';\nimport { Button } from '~/components/shared';\nimport { VerificationInput } from '~/components/mfa';\n\ninterface DialogProps {\n  message: string;\n}\nconst Dialog = ({ message }: DialogProps) => {\n  return (\n    <DialogPrimitive.Root>\n      <DialogPrimitive.Trigger className=\"text-indigo-600\">\n        this secret\n      </DialogPrimitive.Trigger>\n      <DialogPrimitive.Overlay className=\"fixed inset-0 z-20 bg-black/50\" />\n      <DialogPrimitive.Content\n        className={\n          'fixed z-50 w-[95vw] max-w-md rounded-lg p-4 md:w-full top-[50%] left-[50%] -translate-x-[50%] -translate-y-[50%] bg-white '\n        }\n      >\n        <DialogPrimitive.Title className=\"text-sm font-medium text-gray-900 border-b-2 border-gray-200\">\n          Your two-factor secret\n        </DialogPrimitive.Title>\n        <DialogPrimitive.Description className=\"mt-2 text-sm font-normal text-gray-700\">\n          {message}\n        </DialogPrimitive.Description>\n      </DialogPrimitive.Content>\n    </DialogPrimitive.Root>\n  );\n};\n\nconst EnrollTotp = ({ actionData, transition }) => {\n  return (\n    <>\n      <div className=\"text-lg  flex items-center mb-3\">\n        <span className=\"flex absolute -left-4 justify-center items-center w-5 p-3.5 h-5 bg-indigo-500  rounded-full ring-8 ring-white text-base  text-white\">\n          2\n        </span>\n        <h2> Authentication verification</h2>\n      </div>\n      <p>\n        Scan the image below with the Multi-factor authentication app on your\n        phone. If you can't use a QR code, you can enter this text code instead\n      </p>\n      <div className=\"rounded-lg shadow-lg bg-white my-5 w-52 h-52 p-5\">\n        <img\n          src={actionData?.totpFactor?.totp.qr_code}\n          alt=\"QR code\"\n          className=\"w-52\"\n        />\n      </div>\n      <p>\n        After scanning the QR code image, the app will display a code that you\n        can enter below.If you can't use scan the QR code,use{' '}\n        <Dialog message={`${actionData?.totpFactor?.totp.secret}`} /> instead\n      </p>\n      <Form method=\"post\">\n        <div className=\"mt-5 mb-10\">\n          <VerificationInput />\n        </div>\n        <input\n          type=\"hidden\"\n          name=\"authenticationChallengeId\"\n          value={actionData?.totpChallenge?.id}\n        />\n        <Button\n          type=\"submit\"\n          name=\"_action\"\n          value=\"verify\"\n          isLoading={\n            transition.state === 'submitting' &&\n            transition.submission.formData.get('_action') === 'verify'\n          }\n        >\n          Verify\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nconst EnrollSMS = ({ actionData, transition }) => {\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"text-lg  flex items-center mb-3\">\n        <span className=\"flex absolute -left-4 justify-center items-center w-5 p-3.5 h-5 bg-indigo-500  rounded-full ring-8 ring-white text-base  text-white\">\n          2\n        </span>\n        <h2> Authentication verification</h2>\n      </div>\n      <p>\n        We will send authentication codes to your mobile phone during sign in.\n      </p>\n\n      <Form method=\"post\">\n        <fieldset>\n          <label htmlFor=\"phoneNumber\" className=\"text-sm  text-gray-700\">\n            Phone number\n          </label>\n          <input\n            id=\"phoneNumber\"\n            type=\"text\"\n            name=\"phoneNumber\"\n            placeholder=\"(+20)1005321184\"\n            className=\"focus:outline-none focus-visible:ring focus-visible:ring-indigo-500 focus-visible:ring-opacity-75 border border-gray-400 focus-visible:border-transparent mt-1 block max-w-sm rounded-md text-sm text-gray-700 placeholder:text-gray-500 p-1 my-3\"\n          />\n        </fieldset>\n\n        <Button\n          name=\"_action\"\n          value=\"phoneNumber\"\n          type=\"submit\"\n          isLoading={\n            transition.state === 'submitting' &&\n            transition.submission.formData.get('_action') === 'phoneNumber'\n          }\n        >\n          Send authentication code\n        </Button>\n      </Form>\n\n      <Form method=\"post\">\n        <div className=\"mt-5 mb-10\">\n          <VerificationInput />\n        </div>\n        <input\n          type=\"hidden\"\n          name=\"authenticationChallengeId\"\n          value={actionData?.smsChallenge?.id}\n        />\n        <input type=\"hidden\" name=\"isSMSVerification\" value={'true'} />\n        <Button\n          name=\"_action\"\n          value=\"verify\"\n          type=\"submit\"\n          isLoading={\n            transition.state === 'submitting' &&\n            transition.submission.formData.get('_action') === 'verify'\n          }\n        >\n          Verify\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nexport const Verify = () => {\n  const actionData = useActionData();\n  const transition = useTransition();\n  return (\n    <div>\n      <li\n        className={`ml-6 my-5 ${\n          actionData?.step === 1\n            ? 'p-5 border-2 border-gray-200 rounded-md'\n            : ''\n        }`}\n      >\n        {actionData?.step === 1 ? (\n          <>\n            {actionData?.totpFactor && (\n              <EnrollTotp actionData={actionData} transition={transition} />\n            )}\n            {actionData?.smsFactor && (\n              <EnrollSMS actionData={actionData} transition={transition} />\n            )}\n          </>\n        ) : (\n          <div className=\"text-lg  flex items-center mb-3\">\n            {actionData?.step > 1 ? (\n              <span className=\"flex absolute bg-indigo-500 -left-4 justify-center items-center w-7 h-7 rounded-full\">\n                <CheckIcon className=\"w-4 h-4 text-white\" />\n              </span>\n            ) : (\n              <span className=\"flex absolute  -left-4 justify-center items-center w-5 p-3.5 h-5 bg-indigo-500  rounded-full ring-8 ring-white text-base  text-white\">\n                2\n              </span>\n            )}\n            <h2>Authentication verification</h2>\n          </div>\n        )}\n      </li>\n    </div>\n  );\n};\n", "import { Form, useActionData, useTransition } from '@remix-run/react';\nimport { useState } from 'react';\nimport { VerificationInput } from './verification-input';\nimport { Button } from '../shared';\n\nexport const FormSwitcher = () => {\n  const [activeForm, setActiveForm] = useState(0);\n  const actionData = useActionData();\n  const transition = useTransition();\n\n  return (\n    <div>\n      <h2 className=\"text-2xl  mb-5\">Second Factor authentication</h2>\n      <>\n        {activeForm === 0 && (\n          <Form method=\"post\">\n            <h3 className=\"text-xl mb-3 \">Authenticator app</h3>\n            <p>Use the code that is generated by your authenticator app</p>\n            <div className=\"mt-5 mb-10\">\n              <VerificationInput />\n            </div>\n            <input\n              type=\"hidden\"\n              name=\"authenticationChallengeId\"\n              value={actionData?.totpChallengeId}\n            />\n            <input type=\"hidden\" name=\"userId\" value={actionData?.userId} />\n            {actionData?.errors?.authCode && (\n              <div className=\"pt-1 my-4 text-red-700\" id=\"password-error\">\n                {actionData.errors.authCode}\n              </div>\n            )}\n            <Button\n              name=\"_action\"\n              value=\"verify\"\n              isLoading={\n                transition.state === 'submitting' &&\n                transition.submission.formData.get('_action') === 'verify'\n              }\n              type=\"submit\"\n            >\n              Verify\n            </Button>\n            <button\n              className=\"block text-gray-700  my-5 underline\"\n              onClick={() => setActiveForm(1)}\n            >\n              Use SMS\n            </button>\n          </Form>\n        )}\n      </>\n      <>\n        {activeForm === 1 && (\n          <div>\n            <h3 className=\"text-xl mb-3 \">SMS verification code</h3>\n            <p className=\"mb-3\">\n              Use the code that is sent to your registered phone number\n            </p>{' '}\n            <Form method=\"post\">\n              <input\n                type=\"hidden\"\n                name=\"smsFactorId\"\n                value={actionData?.smsFactorId}\n              />\n              <Button\n                name=\"_action\"\n                value=\"SMS\"\n                type=\"submit\"\n                isLoading={\n                  transition.state === 'submitting' &&\n                  transition.submission.formData.get('_action') === 'SMS'\n                }\n              >\n                Send authentication code\n              </Button>\n            </Form>\n            <Form method=\"post\">\n              <div className=\"mt-5 mb-10\">\n                <VerificationInput />\n              </div>\n              <input type=\"hidden\" name=\"userId\" value={actionData?.userId} />\n              <input\n                type=\"hidden\"\n                name=\"authenticationChallengeId\"\n                value={actionData?.smsChallengeId}\n              />\n              <Button\n                name=\"_action\"\n                value=\"verify\"\n                type=\"submit\"\n                isLoading={\n                  transition.state === 'submitting' &&\n                  transition.submission.formData.get('_action') === 'verify'\n                }\n              >\n                Verify\n              </Button>\n              <button\n                className=\"block text-gray-700  my-5 underline\"\n                onClick={() => setActiveForm(0)}\n              >\n                Use authenticator app\n              </button>\n            </Form>\n          </div>\n        )}\n      </>\n    </div>\n  );\n};\n", "import { useSubmit } from '@remix-run/react';\nimport { useState } from 'react';\nimport Input from 'react-verification-input';\n\nexport const VerificationInput = () => {\n  const submit = useSubmit();\n  const [inputLength, setInputLength] = useState(0);\n  const [code, setCode] = useState('');\n\n  const handleChange = (value: string) => {\n    setCode(value);\n    setInputLength(value.length);\n  };\n\n  return (\n    <div className=\"max-w-xs\">\n      <label\n        htmlFor=\"authenticationCode\"\n        className=\"block text-sm  text-gray-700 mb-5\"\n      >\n        Passcode\n      </label>\n      <Input\n        onChange={(value) => handleChange(value)}\n        autoFocus\n        value={code}\n        placeholder=\" \"\n        removeDefaultStyles\n        classNames={{\n          container: 'container',\n          character: 'character',\n          characterInactive: 'character--inactive',\n          characterSelected: 'character--selected',\n        }}\n        inputProps={{\n          name: 'authenticationCode',\n        }}\n      />\n    </div>\n  );\n};\n", "import { Form, useActionData, useTransition } from '@remix-run/react';\nimport { Button } from '../shared';\nimport { VerificationInput } from './verification-input';\n\nexport const SMSForm = () => {\n  const actionData = useActionData();\n  const transition = useTransition();\n\n  return (\n    <Form method=\"post\">\n      SMS Verification code\n      <div className=\"mt-5 mb-10\">\n        <VerificationInput />\n      </div>\n      <input\n        type=\"hidden\"\n        name=\"authenticationChallengeId\"\n        value={actionData?.smsChallengeId}\n      />\n      <input type=\"hidden\" name=\"userId\" value={actionData?.userId} />\n      <Button\n        isLoading={\n          transition.state === 'submitting' &&\n          transition.submission.formData.get('_action') === 'verify'\n        }\n        name=\"_action\"\n        value=\"verify\"\n        type=\"submit\"\n      >\n        Verify\n      </Button>\n    </Form>\n  );\n};\n", "import { Form, useActionData, useTransition } from '@remix-run/react';\nimport { Button } from '../shared';\nimport { VerificationInput } from './verification-input';\n\nexport const TOTPForm = () => {\n  const actionData = useActionData();\n  const transition = useTransition();\n\n  return (\n    <Form method=\"post\">\n      <h3 className=\"text-xl mb-3 \">Authenticator app</h3>\n      <p>Use the code that is generated by your authenticator app</p>{' '}\n      <div className=\"mt-5 mb-10\">\n        <VerificationInput />\n      </div>\n      <input\n        type=\"hidden\"\n        name=\"authenticationChallengeId\"\n        value={actionData?.totpChallengeId}\n      />\n      <input type=\"hidden\" name=\"userId\" value={actionData?.userId} />\n      {actionData?.errors?.authCode && (\n        <div className=\"pt-1 my-4 text-red-700\" id=\"password-error\">\n          {actionData.errors.authCode}\n        </div>\n      )}\n      <Button\n        isLoading={\n          transition.state === 'submitting' &&\n          transition.submission.formData.get('_action') === 'verify'\n        }\n        name=\"_action\"\n        value=\"verify\"\n        type=\"submit\"\n      >\n        Verify\n      </Button>\n    </Form>\n  );\n};\n", "// TODO: forgot-password route\n// send an email for the user, create a resource route that allow them to log in\nexport default function ForgotPassword() {\n  return (\n    <div>\n      <div>ForgotPassword</div>\n    </div>\n  );\n}\n", "import type { ActionFunction, LoaderFunction } from '@remix-run/node';\nimport { json, redirect } from '@remix-run/node';\nimport { DeleteAccount, ChangePassword } from '~/components/settings';\nimport { Factors } from '~/components/settings/mfa/factors';\nimport {\n  deleteUser,\n  disable2FA,\n  getUserAuthFactors,\n  updatePassword,\n} from '~/models/user.server';\nimport {\n  cookieSessionStorage,\n  displayToast,\n  getSession,\n  requireUser,\n  requireUserId,\n} from '~/utils/session.server';\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const userId = await requireUserId(request);\n  const userAuthFactors = await getUserAuthFactors(userId);\n\n  return userAuthFactors;\n};\n\nconst badRequest = (data) => json(data, { status: 400 });\n\nexport const action: ActionFunction = async ({ request }) => {\n  const { session } = await getSession(request);\n  const user = await requireUser(request);\n  let formData = await request.formData();\n  let { _action } = Object.fromEntries(formData);\n\n  switch (_action) {\n    case 'updatePassword':\n      let currentPassword = formData.get('currentPassword');\n      let newPassword = formData.get('newPassword');\n\n      if (\n        typeof currentPassword !== 'string' ||\n        typeof newPassword !== 'string'\n      ) {\n        return badRequest({ formError: `Form not submitted correctly.` });\n      }\n\n      if (!currentPassword || !newPassword) {\n        return json(\n          { errors: { message: 'This field is required' } },\n          { status: 400 }\n        );\n      }\n      const res = await updatePassword(user.id, currentPassword, newPassword);\n\n      if (res) {\n        displayToast(\n          session,\n          'Your password has been updated successfully',\n          'success'\n        );\n\n        return redirect('/settings', {\n          headers: {\n            'Set-Cookie': await cookieSessionStorage.commitSession(session),\n          },\n        });\n      }\n      return res;\n\n    case 'toggle2FA':\n      if (!user.totpFactorId && !user.smsFactorId) {\n        return redirect('/settings/two-factor-authentication');\n      }\n      return await disable2FA(user.id);\n\n    case 'deleteAccount':\n      await deleteUser(user.id);\n      return redirect('/signup');\n  }\n};\n\nexport default function Settings() {\n  return (\n    <section className=\"my-10\">\n      <h1 className=\"text-3xl\">Settings</h1>\n      <div className=\"space-y-10 mt-5\">\n        <ChangePassword />\n        <Factors />\n        <DeleteAccount />\n      </div>\n    </section>\n  );\n}\n", "import { Form, useTransition } from '@remix-run/react';\nimport { useEffect, useRef } from 'react';\nimport { Button } from '../shared';\nimport { TextInput } from '../shared/text-input';\n\nexport const ChangePassword = () => {\n  const transition = useTransition();\n  let formRef = useRef<HTMLFormElement>(null);\n\n  const isUpdatingPassword =\n    transition.state === 'submitting' &&\n    transition.submission.formData.get('_action') === 'updatePassword';\n\n  useEffect(() => {\n    if (!isUpdatingPassword) {\n      formRef.current?.reset();\n    }\n  }, [isUpdatingPassword]);\n\n  return (\n    <div>\n      <h3 className=\"text-xl leading-6 text-gray-900 mb-3\">Change password</h3>\n      <Form ref={formRef} method=\"post\" className=\"space-y-4 max-w-xs\">\n        <fieldset>\n          <label\n            htmlFor=\"currentPassword\"\n            className=\"block mb-1 text-sm text-gray-700\"\n          >\n            Current Password\n          </label>\n          <TextInput\n            id=\"currentPassword\"\n            type=\"password\"\n            name=\"currentPassword\"\n          />\n        </fieldset>\n        <fieldset>\n          <label\n            htmlFor=\"newPassword\"\n            className=\"text-sm mb-1 block text-gray-700\"\n          >\n            New Password\n          </label>\n          <TextInput id=\"newPassword\" type=\"password\" name=\"newPassword\" />\n        </fieldset>\n        <Button\n          isLoading={isUpdatingPassword}\n          name=\"_action\"\n          value=\"updatePassword\"\n          type=\"submit\"\n        >\n          Update password\n        </Button>\n      </Form>\n    </div>\n  );\n};\n", "import { Button } from '../shared';\nimport * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog';\nimport classnames from 'classnames';\nimport { Form } from '@remix-run/react';\n\nexport const DeleteAccount = () => {\n  return (\n    <div>\n      <h3 className=\"text-xl leading-6 text-gray-900 \">Danger Zone</h3>\n      <div className=\"flex w-full flex-col space-y-4 md:flex-row justify-between my-4 md:items-center\">\n        <div>\n          <h4 className=\"mb-1\">Delete your account</h4>\n          <p className=\"text-sm max-w-sm text-gray-600\">\n            Once you delete your account, there is no going back. All of your\n            data will be lost. Please be certain.\n          </p>\n        </div>\n        <Form method=\"post\">\n          <AlertDialogPrimitive.Root>\n            <AlertDialogPrimitive.Trigger asChild>\n              <Button\n                className=\"flex-shrink-0 max-w-[9rem]\"\n                size=\"large\"\n                appearance=\"danger\"\n              >\n                Delete account\n              </Button>\n            </AlertDialogPrimitive.Trigger>\n\n            <AlertDialogPrimitive.Overlay className=\"fixed inset-0 z-20 bg-black/50\" />\n            <AlertDialogPrimitive.Content\n              className={classnames(\n                'fixed z-50',\n                'w-[95vw] max-w-md rounded-lg p-4 md:w-full',\n                'top-[50%] left-[50%] -translate-x-[50%] -translate-y-[50%]',\n                'bg-white',\n                'focus:outline-none focus-visible:ring focus-visible:ring-indigo-500 focus-visible:ring-opacity-75'\n              )}\n            >\n              <AlertDialogPrimitive.Title className=\"text-sm font-medium text-gray-900 \">\n                Are you absolutely sure?\n              </AlertDialogPrimitive.Title>\n              <AlertDialogPrimitive.Description className=\"mt-2 text-sm font-normal text-gray-700\">\n                This action cannot be undone. This will permanently delete your\n                account and remove your data from our servers.\n              </AlertDialogPrimitive.Description>\n              <div className=\"mt-4 flex justify-end space-x-2\">\n                <AlertDialogPrimitive.Cancel asChild>\n                  <Button appearance=\"muted\">Cancel</Button>\n                </AlertDialogPrimitive.Cancel>\n                <Button\n                  type=\"submit\"\n                  name=\"_action\"\n                  value=\"deleteAccount\"\n                  appearance=\"danger\"\n                >\n                  Confirm\n                </Button>\n              </div>\n            </AlertDialogPrimitive.Content>\n          </AlertDialogPrimitive.Root>\n        </Form>\n      </div>\n    </div>\n  );\n};\n", "import { Form, useLoaderData, useTransition } from '@remix-run/react';\nimport { Button } from '~/components/shared/button';\n\nexport const Factors = () => {\n  const data = useLoaderData();\n  const transition = useTransition();\n\n  return (\n    <div>\n      <div>\n        <div className=\"flex items-center justify-between mb-1\">\n          <h3 className=\"text-xl leading-6 text-gray-900 \">\n            Two-factor authentication\n          </h3>\n          <Form method=\"post\">\n            <Button\n              isLoading={\n                transition.state === 'submitting' &&\n                transition.submission.formData.get('_action') === 'toggle2FA'\n              }\n              size=\"small\"\n              name=\"_action\"\n              value=\"toggle2FA\"\n            >\n              {data?.totpFactorId || data?.smsFactorId ? 'Disable' : 'Enable'}\n            </Button>\n          </Form>\n        </div>\n        <p className=\"mb-3 text-sm max-w-md text-gray-600\">\n          Two-factor authentication (2FA) is an extra layer of security used\n          when logging into websites or apps.\n        </p>\n        <div className=\"bg-white shadow overflow-hidden sm:rounded-md\">\n          <div className=\"px-4 py-5 sm:px-6\">\n            <p className=\"mt-1 max-w-2xl text-sm text-gray-500\">\n              Two-factor methods\n            </p>\n          </div>\n          <div className=\"border-t border-gray-200 px-4 py-5 sm:p-0\">\n            <dl className=\"sm:divide-y sm:divide-gray-200\">\n              <div className=\"items-center py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n                <dt className=\"text-sm  text-gray-500\">Authenticator app</dt>\n                <dd className=\"mt-1 text-right text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                  <Form\n                    method=\"get\"\n                    action=\"/settings/two-factor-authentication\"\n                  >\n                    <span className=\"mr-5 text-gray-500\">\n                      {data?.totpFactorId ? 'Configured' : 'Not configured'}\n                    </span>\n                    <Button type=\"submit\">\n                      {data?.totpFactorId ? 'Edit' : 'Add'}\n                    </Button>\n                  </Form>\n                </dd>\n              </div>\n              <div className=\"py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n                <dt className=\"text-sm   text-gray-500\">SMS</dt>\n                <dd className=\"mt-1 text-right text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                  <Form\n                    method=\"get\"\n                    action=\"/settings/two-factor-authentication\"\n                  >\n                    <span className=\"mr-5 text-gray-500\">\n                      {data?.smsFactorId ? 'Configured' : 'Not configured'}\n                    </span>\n                    <Button type=\"submit\">\n                      {data?.smsFactorId ? 'Edit' : 'Add'}\n                    </Button>\n                  </Form>\n                </dd>\n              </div>\n            </dl>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n", "import type { ActionFunction, LoaderFunction } from '@remix-run/node';\nimport { redirect } from '@remix-run/node';\nimport { logout } from '~/utils/session.server';\n\nexport const action: ActionFunction = async ({ request }) => {\n  return logout(request);\n};\n\nexport const loader: LoaderFunction = async () => {\n  return redirect('/');\n};\n", "import type {\n  ActionFunction,\n  LoaderFunction,\n  MetaFunction,\n} from '@remix-run/node';\nimport { json, redirect } from '@remix-run/node';\nimport { Form, Link, useActionData, useSearchParams } from '@remix-run/react';\nimport { getUserId, createUserSession } from '~/utils/session.server';\nimport { createUser, getUserByEmail } from '~/models/user.server';\nimport { safeRedirect, validateEmail } from '~/utils';\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const userId = await getUserId(request);\n  if (userId) return redirect('/');\n  return json({});\n};\n\ninterface ActionData {\n  errors: {\n    email?: string;\n    password?: string;\n  };\n}\n\nexport const action: ActionFunction = async ({ request }) => {\n  const formData = await request.formData();\n  const email = formData.get('email');\n  const password = formData.get('password');\n  const redirectTo = safeRedirect(formData.get('redirectTo'), '/');\n\n  if (!validateEmail(email)) {\n    return json<ActionData>(\n      { errors: { email: 'Email is invalid' } },\n      { status: 400 }\n    );\n  }\n\n  if (typeof password !== 'string') {\n    return json<ActionData>(\n      { errors: { password: 'Password is required' } },\n      { status: 400 }\n    );\n  }\n\n  if (password.length < 8) {\n    return json<ActionData>(\n      { errors: { password: 'Password is too short' } },\n      { status: 400 }\n    );\n  }\n\n  const existingUser = await getUserByEmail(email);\n  if (existingUser) {\n    return json<ActionData>(\n      { errors: { email: 'A user already exists with this email' } },\n      { status: 400 }\n    );\n  }\n\n  const user = await createUser(email, password);\n\n  return createUserSession({\n    request,\n    userId: user.id,\n    remember: false,\n    redirectTo,\n  });\n};\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: 'Sign Up',\n  };\n};\n\nexport default function Join() {\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get('redirectTo') ?? undefined;\n  const actionData = useActionData() as ActionData;\n\n  return (\n    <div className=\"flex min-h-full flex-col justify-center\">\n      <div className=\"mx-auto w-full max-w-md px-8  my-20\">\n        <h1 className=\"text-4xl text-center text-gray-800  mb-10\">Sign up</h1>\n        <Form method=\"post\" className=\"space-y-6\">\n          <div>\n            <label htmlFor=\"email\" className=\"block text-sm  text-gray-700\">\n              Email address\n            </label>\n            <div className=\"mt-1\">\n              <input\n                id=\"email\"\n                required\n                autoFocus={true}\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                aria-invalid={actionData?.errors?.email ? true : undefined}\n                aria-describedby=\"email-error\"\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\n              />\n              {actionData?.errors?.email && (\n                <div className=\"pt-1 text-red-700\" id=\"email-error\">\n                  {actionData.errors.email}\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div>\n            <label htmlFor=\"password\" className=\"block text-sm  text-gray-700\">\n              Password\n            </label>\n            <div className=\"mt-1\">\n              <input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                autoComplete=\"new-password\"\n                aria-invalid={actionData?.errors?.password ? true : undefined}\n                aria-describedby=\"password-error\"\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\n              />\n              {actionData?.errors?.password && (\n                <div className=\"pt-1 text-red-700\" id=\"password-error\">\n                  {actionData.errors.password}\n                </div>\n              )}\n            </div>\n          </div>\n\n          <input type=\"hidden\" name=\"redirectTo\" value={redirectTo} />\n          <button\n            type=\"submit\"\n            className=\"w-full rounded bg-indigo-500  py-2 px-4 text-white hover:bg-indigo-600 focus:bg-indigo-400\"\n          >\n            Create Account\n          </button>\n          <div className=\"flex items-center justify-center\">\n            <div className=\"text-center text-sm text-gray-500\">\n              Already have an account?{' '}\n              <Link\n                className=\"text-indigo-500 underline\"\n                to={{\n                  pathname: '/login',\n                  search: searchParams.toString(),\n                }}\n              >\n                Log in\n              </Link>\n            </div>\n          </div>\n        </Form>\n      </div>\n    </div>\n  );\n}\n", "import { Link } from '@remix-run/react';\nimport { useOptionalUser } from '~/utils';\n\nexport default function Index() {\n  const user = useOptionalUser();\n  return (\n    <main className=\"relative min-h-screen bg-white \">\n      {user ? (\n        <Link\n          to=\"/settings\"\n          className=\"max-w-sm mx-auto mt-40 flex items-center justify-center rounded-md border border-transparent bg-white px-4 py-3 text-base  text-indigo-700 shadow-md hover:bg-indigo-50 sm:px-8\"\n        >\n          Settings\n        </Link>\n      ) : (\n        <div>\n          <p className=\"text-xl text-center mt-40\">\n            Remix app that has user auth + 2FA.\n          </p>\n          <div className=\"mx-auto mt-10 max-w-sm sm:flex sm:max-w-none\">\n            {user ? (\n              <Link\n                to=\"/settings\"\n                className=\"flex items-center justify-center rounded-md border border-transparent bg-white px-4 py-3 text-base  text-indigo-700 shadow-md hover:bg-indigo-50 sm:px-8\"\n              >\n                Settings\n              </Link>\n            ) : (\n              <div className=\"space-y-4 sm:mx-auto sm:inline-grid sm:grid-cols-2 sm:gap-5 sm:space-y-0\">\n                <Link\n                  to=\"/signup\"\n                  className=\"flex items-center justify-center rounded-md border border-transparent bg-white px-4 py-3 text-base  text-indigo-700 shadow-md hover:bg-indigo-50 sm:px-8\"\n                >\n                  Sign up\n                </Link>\n                <Link\n                  to=\"/login\"\n                  className=\"flex items-center justify-center rounded-md bg-indigo-500 px-4 py-3  text-white hover:bg-indigo-600  \"\n                >\n                  Log In\n                </Link>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </main>\n  );\n}\n", "import type {\n  ActionFunction,\n  LoaderFunction,\n  MetaFunction,\n} from '@remix-run/node';\nimport { json, redirect } from '@remix-run/node';\nimport { useActionData } from '@remix-run/react';\nimport { createUserSession, getUserId } from '~/utils/session.server';\nimport { verifyLogin } from '~/models/user.server';\nimport { safeRedirect, validateEmail } from '~/utils';\nimport { workos } from '~/utils/workos.server';\nimport { LoginForm } from '~/components/login-form';\nimport { SMSForm, TOTPForm, FormSwitcher } from '~/components/mfa';\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const userId = await getUserId(request);\n  if (userId) return redirect('/');\n  return null;\n};\n\ninterface ActionData {\n  errors?: {\n    email?: string;\n    password?: string;\n  };\n}\n\nexport const action: ActionFunction = async ({ request }) => {\n  const formData = await request.formData();\n  const redirectTo = safeRedirect(formData.get('redirectTo'), '/');\n  const remember = formData.get('remember');\n  const { _action, ...values } = Object.fromEntries(formData);\n\n  switch (_action) {\n    case 'login':\n      const email = formData.get('email');\n      const password = formData.get('password');\n\n      if (!validateEmail(email)) {\n        return json<ActionData>(\n          { errors: { email: 'Email is invalid' } },\n          { status: 400 }\n        );\n      }\n\n      if (typeof password !== 'string') {\n        return json<ActionData>(\n          { errors: { password: 'Password is required' } },\n          { status: 400 }\n        );\n      }\n\n      if (password.length < 8) {\n        return json<ActionData>(\n          { errors: { password: 'Password is too short' } },\n          { status: 400 }\n        );\n      }\n\n      const user = await verifyLogin(email, password);\n\n      if (!user) {\n        return json<ActionData>(\n          { errors: { email: 'Invalid email or password' } },\n          { status: 400 }\n        );\n      }\n\n      const hasMfaEnabled = user.totpFactorId || user.smsFactorId;\n\n      if (!hasMfaEnabled) {\n        return createUserSession({\n          request,\n          userId: user.id,\n          remember: remember === 'on',\n          redirectTo,\n        });\n      }\n\n      const hasTotpEnabled = user.totpFactorId && !user.smsFactorId;\n\n      if (hasTotpEnabled) {\n        const totpChallenge = await workos.mfa.challengeFactor({\n          authenticationFactorId: `${user.totpFactorId}`,\n        });\n\n        return {\n          userId: user.id,\n          totpChallengeId: user.totpFactorId && totpChallenge.id,\n          totpFactorId: user.totpFactorId,\n        };\n      }\n\n      const hasSmsEnabled = user.smsFactorId && !user.totpFactorId;\n\n      if (hasSmsEnabled) {\n        const smsChallenge = await workos.mfa.challengeFactor({\n          authenticationFactorId: `${user.smsFactorId}`,\n        });\n\n        return {\n          userId: user.id,\n          smsChallengeId: user.smsFactorId && smsChallenge.id,\n          smsFactorId: user.smsFactorId,\n        };\n      }\n\n      const hasAllFactorsEnabled = user.totpFactorId && user.smsFactorId;\n\n      if (hasAllFactorsEnabled) {\n        const totpChallenge = await workos.mfa.challengeFactor({\n          authenticationFactorId: `${user.totpFactorId}`,\n        });\n\n        return {\n          userId: user.id,\n          totpChallengeId: totpChallenge.id,\n          totpFactorId: user.totpFactorId,\n          smsFactorId: user.smsFactorId,\n        };\n      }\n\n    case 'SMS':\n      const { smsFactorId } = values;\n      const smsChallenge = await workos.mfa.challengeFactor({\n        authenticationFactorId: `${smsFactorId}`,\n      });\n\n      return {\n        smsChallengeId: smsChallenge.id,\n      };\n\n    case 'verify':\n      const { authenticationCode, authenticationChallengeId, userId } = values;\n\n      const response = await workos.mfa.verifyFactor({\n        authenticationChallengeId: `${authenticationChallengeId}`,\n        code: `${authenticationCode}`,\n      });\n\n      if (response.error) {\n        return json(\n          {\n            errors: {\n              authCode: `Something went wrong. Please try again`,\n            },\n          },\n          { status: 400 }\n        );\n      }\n\n      return createUserSession({\n        request,\n        userId: `${userId}`,\n        remember: remember === 'on' ? true : false,\n        redirectTo,\n      });\n  }\n};\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: 'Login',\n  };\n};\n\nexport default function LoginPage() {\n  const actionData = useActionData();\n\n  const hasSmsEnabled = actionData?.smsFactorId;\n  const hasTotpEnabled = actionData?.totpFactorId;\n  const hasMfaEnabled = hasSmsEnabled || hasTotpEnabled;\n  const hasAllFactorsEnabled = hasTotpEnabled && hasSmsEnabled;\n\n  return (\n    <div className=\"flex min-h-full flex-col justify-center\">\n      <div className=\"mx-auto w-full max-w-md px-8 my-20\">\n        <h1 className=\"text-4xl text-center text-gray-800  mb-10\">Log in</h1>\n        {!hasMfaEnabled && <LoginForm />}\n        {hasAllFactorsEnabled ? (\n          <FormSwitcher />\n        ) : (\n          <>\n            {hasTotpEnabled && <TOTPForm />}\n            {hasSmsEnabled && <SMSForm />}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n", "import { Form, Link, useActionData, useSearchParams } from '@remix-run/react';\nimport { Button } from './shared';\nimport { TextInput } from './shared/text-input';\n\nexport const LoginForm = () => {\n  const actionData = useActionData();\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get('redirectTo') || '/';\n\n  return (\n    <Form method=\"post\" className=\"space-y-6\">\n      <div>\n        <label htmlFor=\"email\" className=\"block text-sm  text-gray-700\">\n          Email address\n        </label>\n        <div className=\"mt-1\">\n          <TextInput\n            id=\"email\"\n            required\n            autoFocus={true}\n            name=\"email\"\n            type=\"email\"\n            autoComplete=\"email\"\n            aria-invalid={actionData?.errors?.email ? true : undefined}\n            aria-describedby=\"email-error\"\n          />\n          {actionData?.errors?.email && (\n            <p className=\"pt-1 text-red-700\" id=\"email-error\">\n              {actionData.errors.email}\n            </p>\n          )}\n        </div>\n      </div>\n\n      <div>\n        <label htmlFor=\"password\" className=\"block text-sm  text-gray-700\">\n          Password\n        </label>\n        <div className=\"mt-1\">\n          <TextInput\n            id=\"password\"\n            name=\"password\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            aria-invalid={actionData?.errors?.password ? true : undefined}\n            aria-describedby=\"password-error\"\n          />\n          {actionData?.errors?.password && (\n            <div className=\"pt-1 text-red-700\" id=\"password-error\">\n              {actionData.errors.password}\n            </div>\n          )}\n        </div>\n      </div>\n\n      <input type=\"hidden\" name=\"redirectTo\" value={redirectTo} />\n      <Button name=\"_action\" value=\"login\" type=\"submit\">\n        Log in\n      </Button>\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center\">\n          <input\n            id=\"remember\"\n            name=\"remember\"\n            type=\"checkbox\"\n            className=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500\"\n          />\n          <label\n            htmlFor=\"remember\"\n            className=\"ml-2 block text-sm text-gray-900\"\n          >\n            Remember me\n          </label>\n        </div>\n        <div className=\"text-center text-sm text-gray-500\">\n          Don't have an account?{' '}\n          <Link\n            className=\"text-indigo-500 underline\"\n            to={{\n              pathname: '/signup',\n              search: searchParams.toString(),\n            }}\n          >\n            Sign up\n          </Link>\n        </div>\n      </div>\n    </Form>\n  );\n};\n", "export default {'version':'ca615b23','entry':{'module':'/build/entry.client-7ZR5TS6L.js','imports':['/build/_shared/chunk-SXNYENQH.js','/build/_shared/chunk-3P3WQLY7.js','/build/_shared/chunk-6BO74FWO.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-HPZK26WR.js','imports':['/build/_shared/chunk-ID7K5OUP.js','/build/_shared/chunk-5PV7TYNA.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/forgot-password':{'id':'routes/forgot-password','parentId':'root','path':'forgot-password','index':undefined,'caseSensitive':undefined,'module':'/build/routes/forgot-password-6GZX3E3H.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-KOCDH3WO.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/login':{'id':'routes/login','parentId':'root','path':'login','index':undefined,'caseSensitive':undefined,'module':'/build/routes/login-52CZZEMU.js','imports':['/build/_shared/chunk-F6G4TSMX.js','/build/_shared/chunk-MF7JT5NH.js','/build/_shared/chunk-JC7Y5XDO.js','/build/_shared/chunk-SODL2DQU.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/logout':{'id':'routes/logout','parentId':'root','path':'logout','index':undefined,'caseSensitive':undefined,'module':'/build/routes/logout-BEI33Z42.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/settings':{'id':'routes/settings','parentId':'root','path':'settings','index':undefined,'caseSensitive':undefined,'module':'/build/routes/settings-W2T3PUWO.js','imports':['/build/_shared/chunk-MF7JT5NH.js','/build/_shared/chunk-ITEGLWQP.js','/build/_shared/chunk-JC7Y5XDO.js','/build/_shared/chunk-SODL2DQU.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/settings.two-factor-authentication':{'id':'routes/settings.two-factor-authentication','parentId':'root','path':'settings/two-factor-authentication','index':undefined,'caseSensitive':undefined,'module':'/build/routes/settings.two-factor-authentication-KMSW3A3U.js','imports':['/build/_shared/chunk-F6G4TSMX.js','/build/_shared/chunk-ITEGLWQP.js','/build/_shared/chunk-JC7Y5XDO.js','/build/_shared/chunk-SODL2DQU.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/signup':{'id':'routes/signup','parentId':'root','path':'signup','index':undefined,'caseSensitive':undefined,'module':'/build/routes/signup-O3AK7CWS.js','imports':['/build/_shared/chunk-SODL2DQU.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-CA615B23.js'};", "\nimport * as entryServer from \"/Users/mahmoud/Desktop/remix-with-workos/app/entry.server.tsx\";\nimport * as route0 from \"/Users/mahmoud/Desktop/remix-with-workos/app/root.tsx\";\nimport * as route1 from \"/Users/mahmoud/Desktop/remix-with-workos/app/routes/settings.two-factor-authentication.tsx\";\nimport * as route2 from \"/Users/mahmoud/Desktop/remix-with-workos/app/routes/forgot-password.tsx\";\nimport * as route3 from \"/Users/mahmoud/Desktop/remix-with-workos/app/routes/settings.tsx\";\nimport * as route4 from \"/Users/mahmoud/Desktop/remix-with-workos/app/routes/logout.tsx\";\nimport * as route5 from \"/Users/mahmoud/Desktop/remix-with-workos/app/routes/signup.tsx\";\nimport * as route6 from \"/Users/mahmoud/Desktop/remix-with-workos/app/routes/index.tsx\";\nimport * as route7 from \"/Users/mahmoud/Desktop/remix-with-workos/app/routes/login.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/settings.two-factor-authentication\": {\n      id: \"routes/settings.two-factor-authentication\",\n      parentId: \"root\",\n      path: \"settings/two-factor-authentication\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/forgot-password\": {\n      id: \"routes/forgot-password\",\n      parentId: \"root\",\n      path: \"forgot-password\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/settings\": {\n      id: \"routes/settings\",\n      parentId: \"root\",\n      path: \"settings\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/logout\": {\n      id: \"routes/logout\",\n      parentId: \"root\",\n      path: \"logout\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/signup\": {\n      id: \"routes/signup\",\n      parentId: \"root\",\n      path: \"signup\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route6\n    },\n  \"routes/login\": {\n      id: \"routes/login\",\n      parentId: \"root\",\n      path: \"login\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route7\n    }\n  };"],
  "mappings": "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",
  "names": []
}
